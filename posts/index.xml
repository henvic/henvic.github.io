<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog posts on Henrique Vicente</title>
    <link>https://henvic.dev/posts/</link>
    <description>Recent content in Blog posts on Henrique Vicente</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Jun 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://henvic.dev/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>On testing Go code using the standard library</title>
      <link>https://henvic.dev/posts/testing-go/</link>
      <pubDate>Tue, 18 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://henvic.dev/posts/testing-go/</guid>
      <description>Most modern programming language ecosystems provide assert functions in their testing libraries but not Go&amp;rsquo;s. Its standard testing package follows a more direct and to-the-point approach. In fact, there isn&amp;rsquo;t even a single assertion function in the testing package, and writing idiomatic tests in Go isn&amp;rsquo;t that different from writing application code.&#xA;You mainly use the t.Errorf and t.Fatalf functions, which borrows the idioms of the fmt package to format output, as shown in this code, meaning you get to use the helpful printing verbs of the fmt package, such as:</description>
    </item>
    <item>
      <title>My new Tesla Model Y 2023</title>
      <link>https://henvic.dev/posts/tesla/</link>
      <pubDate>Wed, 11 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://henvic.dev/posts/tesla/</guid>
      <description>On December 12th, I took a train to the small city of Tilburg to go to the Tesla Factory to take delivery of my 2023 Tesla ModelÂ Y. This post covers some key points about the Tesla Model Y and more.&#xA;Fact sheet Model Tesla ModelÂ Y 2023 Rear-Wheel Drive Autopilot Standard (Basic Autopilot) Exterior Pear White Multi-Coat Interior Full Premium (black) Wheels 19&amp;quot; Gemini Seating Layout Five Seat Interior Battery Lithium iron phosphate (LFP) Windows Double-insulated (front and rear) Sensors Tesla Vision with 5MP cameras Table of Contents show/hide Timeline Delivery Oops :~ missing 10,000km Supercharging credit for 3 days, and $$$ discount for a month!</description>
    </item>
    <item>
      <title>UTF-8 strings with Go: len(s) isn&#39;t enough</title>
      <link>https://henvic.dev/posts/go-utf8/</link>
      <pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://henvic.dev/posts/go-utf8/</guid>
      <description>In this post, I show you the bare minimum you need to know how to do UTF-8 string manipulation in Go safely.&#xA;Update 09/03/2022: Someone at Reddit pointed out that counting runes isn&amp;rsquo;t enough to slice strings correctly, given that Unicode has multi-codepoint glyphs, such as for flags. I&amp;rsquo;ve updated the post to reflect that but couldn&amp;rsquo;t find a concise and straightforward solution.&#xA;Read also: Back to basics: Writing an application using Go and PostgreSQL and Homelab: Intel NUC with the ESXi hypervisor.</description>
    </item>
    <item>
      <title>Back to basics: Writing an application using Go and PostgreSQL</title>
      <link>https://henvic.dev/posts/go-postgres/</link>
      <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://henvic.dev/posts/go-postgres/</guid>
      <description>By reading this tutorial, you&amp;rsquo;ll learn how to use PostgreSQL with the Go programming language using the pgx driver and toolkit in a very productive manner. Furthermore, with the provided source code, you&amp;rsquo;ll be able to learn how to write efficient and sound unit and integration tests, ready to be run locally or on a Continuous Integration environment, such as GitHub Actions. Use the Table of Contents to skip to a specific part of this long post.</description>
    </item>
    <item>
      <title>Upgrading to PostgreSQL 14 on FreeBSD 13</title>
      <link>https://henvic.dev/posts/postgres-14-freebsd-13/</link>
      <pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://henvic.dev/posts/postgres-14-freebsd-13/</guid>
      <description>In this blog post, I&amp;rsquo;ll show how to update PostgreSQL 14 on FreeBSD 13. Instead of running a database on my development machine, I run it on a FreeBSD virtual machine on my Intel NUC VMware ESXi homelab, and connect to it from anywhere thanks to Tailscale.&#xA;First, I started by making a backup of my data and locating where my current PostgreSQL configuration lives:&#xA;1 2 $ pg_dumpall -U pgsql | gzip &amp;gt; backup.</description>
    </item>
    <item>
      <title>You don&#39;t need UUID</title>
      <link>https://henvic.dev/posts/uuid/</link>
      <pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate>
      <guid>https://henvic.dev/posts/uuid/</guid>
      <description>UUID, short for Universally Unique Identifier (spec), is a 128-bit identifier format widespread on computer systems. The following is an example, using its prevalent representation: a73ba12d-1d8b-2516-3aee-4b15e563a835. I&amp;rsquo;ve experienced first-hand how using UUID hurts the usability of computer systems, and I want you to understand why you certainly don&amp;rsquo;t need it.&#xA;Take Amazon. Which do you think is a link to one of their products?&#xA;amzn.to/3c6n63N amzn.to/a73ba12d-1d8b-2516-3aee-4b15e563a835 A simple ID like 3c6n63N is more than enough to represent any product while keeping it readable and making communication easier.</description>
    </item>
    <item>
      <title>Crise das tulipas: Bitcoin Ã© uma pÃ©ssima idÃ©ia</title>
      <link>https://henvic.dev/posts/bitcoin-pt/</link>
      <pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate>
      <guid>https://henvic.dev/posts/bitcoin-pt/</guid>
      <description>English ðŸ‡ºðŸ‡¸&#xA;Esta Ã© uma traduÃ§Ã£o do meu artigo original em inglÃªs Cryptocurrency Tulipmania: Bitcoin is a shitcoin levemente adaptado :)&#xA;Have fun staying poor! / Divirta-se ficando pobre!&#xA;O bordÃ£o tÃ­pico do aventureiro maximalista do Bitcoin (que costuma chamar outras criptomoedas de shitcoins, sem reconhecer que o Bitcoin Ã© a pior shitcoin de todas) O mercado de criptomoedas estÃ¡ aquecido. Por anos, o Bitcoin tem subido desenfreadamente. Pessoas ao redor do mundo compram e seguram a moeda apostando em O surgimento e a ascensÃ£o do Bitcoin.</description>
    </item>
    <item>
      <title>Cryptocurrency Tulipmania: Bitcoin is a shitcoin</title>
      <link>https://henvic.dev/posts/bitcoin/</link>
      <pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate>
      <guid>https://henvic.dev/posts/bitcoin/</guid>
      <description>PortuguÃªs ðŸ‡§ðŸ‡·&#xA;Have fun staying poor!&#xA;Typical Bitcoin maximalist catchphrase (they also call other cryptocurrencies shitcoins while unaware Bitcoin is the worst shitcoin) The cryptocurrency market is hot. For years, Bitcoin has been going up and up. People worldwide buy and HODL betting on The Rise and Rise of Bitcoin. Etherum and Dogecoin are gaining space in the mainstream too. HODL is a backronym for &#34;hold on for dear life&#34;</description>
    </item>
    <item>
      <title>The ecosystem of the Go programming language</title>
      <link>https://henvic.dev/posts/go/</link>
      <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://henvic.dev/posts/go/</guid>
      <description>Go is one of the most prominent general-purpose programming languages nowadays. Google, Apple, Microsoft, Amazon, and Adobe, to name a few, have been using the language extensively. It&amp;rsquo;s the language of choice behind multiple cloud computing projects such as Kubernetes, and it&amp;rsquo;s steadily expanding towards numerous areas of software development. In this article, you&amp;rsquo;ll find resources to learn about Go and its ecosystem.&#xA;If you want to see how people are using Go, check out the Go Developer Survey 2020 Results.</description>
    </item>
    <item>
      <title>My Go mistakes</title>
      <link>https://henvic.dev/posts/my-go-mistakes/</link>
      <pubDate>Thu, 18 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://henvic.dev/posts/my-go-mistakes/</guid>
      <description>In this post, I share mistakes I&amp;rsquo;ve made writing Go code for six years since the beginning of my journey with the language.&#xA;Table of Contents show/hide init() functions Constants Nil pointer dereference Comments and documentation Creating too many packages Exporting names Internal packages Globals and configuration Imports and build size Concurrency and streams Sockets and WebSocket Read also: The ecosystem of the Go programming language and Environment variables, config, secrets, and globals.</description>
    </item>
    <item>
      <title>Environment variables, config, secrets, and globals</title>
      <link>https://henvic.dev/posts/env/</link>
      <pubDate>Sat, 16 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://henvic.dev/posts/env/</guid>
      <description>At some point in time, perhaps with the advent of The Twelve-Factor App methodology, we saw new server-side applications moving from a file-based configuration to an environment variable configuration approach.&#xA;Many developers like to use environment variables for credentials because they are ephemeral. By relying on them, you might avoid leaking credentials on the web by accidentally checking them on public repositories, or in case of a directory traversal attack vulnerability.</description>
    </item>
    <item>
      <title>signal.NotifyContext: handling cancelation with Unix signals using context</title>
      <link>https://henvic.dev/posts/signal-notify-context/</link>
      <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://henvic.dev/posts/signal-notify-context/</guid>
      <description>From Go 1.16 onwards, thanks to after this change I introduced to the standard library you&amp;rsquo;ll be able to use the following to control context cancelation using Unix signals, simplifying handling operating system signals in Go for certain common cases. This is my first contribution to the Go standard library, and I am very excited!&#xA;1 2 ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt) defer stop() You might want to also handle SIGTERM to cover the case where a process is terminated without a terminal Interruption (which will most likely be the case in a production deployment):</description>
    </item>
    <item>
      <title>I&#39;m starting an opensource e-commerce project.</title>
      <link>https://henvic.dev/posts/e-commerce/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://henvic.dev/posts/e-commerce/</guid>
      <description>Most e-commerce platforms operate in a way that makes stores relying on them hostage due to vendor lock-in models. E-commerce is something that can get complex fast. Search engine optimization (SEO), inventory management, order status, and user experience are essential and can get hard quickly. Especially when in light of the danger of trying to make everything customizable. Substantial transaction fees drive away businesses operating on tight profit margins. market is an opensource e-commerce software dedicated to the public domain to help small and medium businesses to establish their online presence with a high-quality website without gotchas.</description>
    </item>
    <item>
      <title>Counter-Strike code leaked: should you worry? What if your code leaks? Learn how to deliver software securely.</title>
      <link>https://henvic.dev/posts/cs-security/</link>
      <pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://henvic.dev/posts/cs-security/</guid>
      <description>The source code for the game Counter-Strike: GO has leaked today. I&amp;rsquo;m sad to see many concerned users decided not to play the game anymore, for now, worried about Remote Code Execution (RCE). Valve told them they&amp;rsquo;ve reviewed the code, and there&amp;rsquo;s no reason for users to worry.&#xA;Here&amp;rsquo;s I discuss what everyone should be doing about distributing software to the general public safely, and why I trust this statement:</description>
    </item>
    <item>
      <title>Homelab: Intel NUC with the ESXi hypervisor</title>
      <link>https://henvic.dev/posts/homelab/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://henvic.dev/posts/homelab/</guid>
      <description>In this blog post, I&amp;rsquo;m going to talk a little about my experience running multiple operating systems with an Intel NUC I recently bought and the ESXi 7 hypervisor. My main idea was to use this homelab for:&#xA;Network Area Storage (NAS)&#xA;Kubernetes cluster&#xA;FreeBSD playground&#xA;Managing backup&#xA;Stage and development machine for Go projects&#xA;Table of Contents show/hide Hardware If you want to buy the same thing Hypervisor and operating systems Web client Using HTTPS certificates Back to Intel NUC 10 Virtual switch More Ethernet issues Running virtual machines Operating systems FreeBSD FreeNAS Clear Linux OS OpenIndiana Haiku TempleOS CPU, memory, and storage for each virtual machine Fuchsia Virtual machines and emulators Accessing from the outside world Virtual Private Network (VPN) OpenVPN Protecting your system Ideas Importing data from the cloud Continuous Integration Backup &amp;amp; restore plan Processing photos and videos ToR EternalTerminal Reviews from others Thanks Hardware I thought I&amp;rsquo;d get a full-size ATX tower case with plenty of space for expansion and components, but I was always open to any form factor.</description>
    </item>
  </channel>
</rss>
