<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog posts on Henrique Vicente</title>
    <link>https://henvic.dev/posts/</link>
    <description>Recent content in Blog posts on Henrique Vicente</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://henvic.dev/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Environment variables, config, secrets, and globals</title>
      <link>https://henvic.dev/posts/env/</link>
      <pubDate>Sat, 16 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://henvic.dev/posts/env/</guid>
      <description>At some point in time, perhaps with the advent of The Twelve-Factor App methodology, we saw new server-side applications moving from a file-based configuration to an environment variable configuration approach.
Many developers like to use environment variables for credentials because they are ephemeral. By relying on them, you might avoid leaking credentials on the web by accidentally checking them on public repositories or in case of a directory traversal attack vulnerability.</description>
    </item>
    
    <item>
      <title>signal.NotifyContext: handling cancelation with Unix signals using context</title>
      <link>https://henvic.dev/posts/signal-notify-context/</link>
      <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://henvic.dev/posts/signal-notify-context/</guid>
      <description>From Go 1.16 onwards, you&amp;rsquo;ll be able to use
1 2  ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt) defer stop()   to control context cancelation using Unix signals, simplifying handling operating system signals in Go for certain common cases. This is my first contribution to the Go standard library, and I am very excited!
Why When writing CLI code, I often needed to handle cancellation â€“ for instance, when a user presses CTRL+C producing an interrupt signal.</description>
    </item>
    
    <item>
      <title>I&#39;m starting an opensource e-commerce project.</title>
      <link>https://henvic.dev/posts/e-commerce/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://henvic.dev/posts/e-commerce/</guid>
      <description>Most e-commerce platforms operate in a way that makes stores relying on them hostage due to vendor lock-in models. E-commerce is something that can get complex fast. Search engine optimization (SEO), inventory management, order status, and user experience are essential and can get hard quickly. Especially when in light of the danger of trying to make everything customizable. Substantial transaction fees drive away businesses operating on tight profit margins.  market is an opensource e-commerce software dedicated to the public domain to help small and medium businesses to establish their online presence with a high-quality website without gotchas.</description>
    </item>
    
    <item>
      <title>Counter-Strike code leaked: should you worry? What if your code leaks? Learn how to deliver software securely.</title>
      <link>https://henvic.dev/posts/cs-security/</link>
      <pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://henvic.dev/posts/cs-security/</guid>
      <description>The source code for the game Counter-Strike: GO has leaked today. I&amp;rsquo;m sad to see many concerned users decided not to play the game anymore, for now, worried about Remote Code Execution (RCE). Valve told them they&amp;rsquo;ve reviewed the code, and there&amp;rsquo;s no reason for users to worry.
Here&amp;rsquo;s I discuss what everyone should be doing about distributing software to the general public safely, and why I trust this statement:</description>
    </item>
    
    <item>
      <title>Homelab: Intel NUC with the ESXi hypervisor</title>
      <link>https://henvic.dev/posts/homelab/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://henvic.dev/posts/homelab/</guid>
      <description>In this blog post, I&amp;rsquo;m going to talk a little about my experience running multiple operating systems with an Intel NUC I recently bought and the ESXi 7 hypervisor. My main idea was to use this homelab for:
  Network Area Storage (NAS)
  Kubernetes cluster
  FreeBSD playground
  Managing backup
  Stage and development machine for Go projects
  Hardware I thought I&amp;rsquo;d get a full-size ATX tower case with plenty of space for expansion and components, but I was always open to any form factor.</description>
    </item>
    
  </channel>
</rss>
